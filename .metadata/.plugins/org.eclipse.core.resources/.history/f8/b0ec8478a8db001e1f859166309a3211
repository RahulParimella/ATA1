package com.example.demo.Service;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.example.demo.Dto.UserCredentialDto;
import com.example.demo.Repository.UserCredentialRepository;
import com.example.demo.model.UserCredential;
import com.example.demo.registration.dto.UserRegistrationDto;
import com.example.demo.registration.modelmapper.RegistrationMapper;

@Service
public class AuthService {

	@Autowired
	private UserCredentialRepository repository;
	@Autowired
	private PasswordEncoder passwordEncoder;

	@Autowired
	private JwtService jwtService;

//	public String saveuser(UserCredential credential) {
//		credential.setPassword(passwordEncoder.encode(credential.getPassword()));
//		repository.save(credential);
//		return "user added successfully";
//
//	}
	 @Override
	    public String save(UserCredentialDto userCredentialDto) {

	        List<UserCredential> userList = repository.findAll();
	        List<UserCredentialDto> userDtoList = userList.stream()
	                .map(RegistrationMapper::mapToRegistrationDto)
	                .collect(Collectors.toList());

	        if (userDtoList != null) {
	            for (UserCredentialDto user : userDtoList) {
	                if (user.getName().equals(userCredentialDto.getName())) {
	                    flag = true;
	                } else {
	                    flag = false;
	                }
	            }

	            if (flag) {
	                return "User already exists";
	            } else {
	            	userCredentialDto.setPassword(passwordEncoder.encode(userDto.getPassword()));
	                repository.save(RegistrationMapper.mapToRegistration(userDto));
	                return "Saved User";
	            }
	        }
	        return "Unable to process registration";
	    }
	 public String generateToken(String username) {
			return jwtService.generateToken(username);
		}
	 
	 public void validateToken(String token) {
		 jwtService.validateToken(token);
	 }
}