package com.example.demo.Controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.Dto.AuthRequest;
import com.example.demo.Dto.UserCredentialDto;
import com.example.demo.Service.AuthService;

@RequestMapping("/auth")
@RestController
public class AuthController {
	
	@Autowired
	private AuthService service;
	
	@Autowired
	private AuthenticationManager authenticationManager;
	
	
	@PostMapping("/register")
	public String saveUser(@RequestBody UserCredentialDto usercredentialDto) {
		return service.save(usercredentialDto);
	}
	

	@PostMapping("/token")	public String generateToken(@RequestBody AuthRequest authRequest) {
		Authentication authentication = authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(authRequest.getUsername(), authRequest.getPassword()));
		if(authentication.isAuthenticated()) {
		//return jwtService.generateToken(authRequest.getUsername());
			String token = jwtService.generateToken(authRequest.getUsername());
	        System.out.println("Generated Token: " + token);
	        return token;
		}else {
			throw new UsernameNotFoundException("Invalid User");
			//return "Invalid User";
		}
	}
	@GetMapping("/validate")
	public String validateToken(@RequestParam("token")String token) {
		 service.validateToken(token);
		 return "token is valid";
		
	}
}
